var documenterSearchIndex = {"docs":
[{"location":"pages/constants/#ClickHouse-status-codes","page":"Status codes","title":"ClickHouse status codes","text":"","category":"section"},{"location":"pages/constants/#OhMyCH.ErrorCodes","page":"Status codes","title":"OhMyCH.ErrorCodes","text":"0 - OK\n1 - UNSUPPORTED_METHOD\n2 - UNSUPPORTED_PARAMETER\n3 - UNEXPECTED_END_OF_FILE\n4 - EXPECTED_END_OF_FILE\n6 - CANNOT_PARSE_TEXT\n7 - INCORRECT_NUMBER_OF_COLUMNS\n8 - THERE_IS_NO_COLUMN\n9 - SIZES_OF_COLUMNS_DOESNT_MATCH\n10 - NOT_FOUND_COLUMN_IN_BLOCK\n11 - POSITION_OUT_OF_BOUND\n12 - PARAMETER_OUT_OF_BOUND\n13 - SIZES_OF_COLUMNS_IN_TUPLE_DOESNT_MATCH\n15 - DUPLICATE_COLUMN\n16 - NO_SUCH_COLUMN_IN_TABLE\n19 - SIZE_OF_FIXED_STRING_DOESNT_MATCH\n20 - NUMBER_OF_COLUMNS_DOESNT_MATCH\n23 - CANNOT_READ_FROM_ISTREAM\n24 - CANNOT_WRITE_TO_OSTREAM\n25 - CANNOT_PARSE_ESCAPE_SEQUENCE\n26 - CANNOT_PARSE_QUOTED_STRING\n27 - CANNOT_PARSE_INPUT_ASSERTION_FAILED\n28 - CANNOT_PRINT_FLOAT_OR_DOUBLE_NUMBER\n32 - ATTEMPT_TO_READ_AFTER_EOF\n33 - CANNOT_READ_ALL_DATA\n34 - TOO_MANY_ARGUMENTS_FOR_FUNCTION\n35 - TOO_FEW_ARGUMENTS_FOR_FUNCTION\n36 - BAD_ARGUMENTS\n37 - UNKNOWN_ELEMENT_IN_AST\n38 - CANNOT_PARSE_DATE\n39 - TOO_LARGE_SIZE_COMPRESSED\n40 - CHECKSUM_DOESNT_MATCH\n41 - CANNOT_PARSE_DATETIME\n42 - NUMBER_OF_ARGUMENTS_DOESNT_MATCH\n43 - ILLEGAL_TYPE_OF_ARGUMENT\n44 - ILLEGAL_COLUMN\n46 - UNKNOWN_FUNCTION\n47 - UNKNOWN_IDENTIFIER\n48 - NOT_IMPLEMENTED\n49 - LOGICAL_ERROR\n50 - UNKNOWN_TYPE\n51 - EMPTY_LIST_OF_COLUMNS_QUERIED\n52 - COLUMN_QUERIED_MORE_THAN_ONCE\n53 - TYPE_MISMATCH\n55 - STORAGE_REQUIRES_PARAMETER\n56 - UNKNOWN_STORAGE\n57 - TABLE_ALREADY_EXISTS\n58 - TABLE_METADATA_ALREADY_EXISTS\n59 - ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER\n60 - UNKNOWN_TABLE\n62 - SYNTAX_ERROR\n63 - UNKNOWN_AGGREGATE_FUNCTION\n68 - CANNOT_GET_SIZE_OF_FIELD\n69 - ARGUMENT_OUT_OF_BOUND\n70 - CANNOT_CONVERT_TYPE\n71 - CANNOT_WRITE_AFTER_END_OF_BUFFER\n72 - CANNOT_PARSE_NUMBER\n73 - UNKNOWN_FORMAT\n74 - CANNOT_READ_FROM_FILE_DESCRIPTOR\n75 - CANNOT_WRITE_TO_FILE_DESCRIPTOR\n76 - CANNOT_OPEN_FILE\n77 - CANNOT_CLOSE_FILE\n78 - UNKNOWN_TYPE_OF_QUERY\n79 - INCORRECT_FILE_NAME\n80 - INCORRECT_QUERY\n81 - UNKNOWN_DATABASE\n82 - DATABASE_ALREADY_EXISTS\n83 - DIRECTORY_DOESNT_EXIST\n84 - DIRECTORY_ALREADY_EXISTS\n85 - FORMAT_IS_NOT_SUITABLE_FOR_INPUT\n86 - RECEIVED_ERROR_FROM_REMOTE_IO_SERVER\n87 - CANNOT_SEEK_THROUGH_FILE\n88 - CANNOT_TRUNCATE_FILE\n89 - UNKNOWN_COMPRESSION_METHOD\n90 - EMPTY_LIST_OF_COLUMNS_PASSED\n91 - SIZES_OF_MARKS_FILES_ARE_INCONSISTENT\n92 - EMPTY_DATA_PASSED\n93 - UNKNOWN_AGGREGATED_DATA_VARIANT\n94 - CANNOT_MERGE_DIFFERENT_AGGREGATED_DATA_VARIANTS\n95 - CANNOT_READ_FROM_SOCKET\n96 - CANNOT_WRITE_TO_SOCKET\n99 - UNKNOWN_PACKET_FROM_CLIENT\n100 - UNKNOWN_PACKET_FROM_SERVER\n101 - UNEXPECTED_PACKET_FROM_CLIENT\n102 - UNEXPECTED_PACKET_FROM_SERVER\n104 - TOO_SMALL_BUFFER_SIZE\n107 - FILE_DOESNT_EXIST\n108 - NO_DATA_TO_INSERT\n109 - CANNOT_BLOCK_SIGNAL\n110 - CANNOT_UNBLOCK_SIGNAL\n111 - CANNOT_MANIPULATE_SIGSET\n112 - CANNOT_WAIT_FOR_SIGNAL\n113 - THERE_IS_NO_SESSION\n114 - CANNOT_CLOCK_GETTIME\n115 - UNKNOWN_SETTING\n116 - THERE_IS_NO_DEFAULT_VALUE\n117 - INCORRECT_DATA\n119 - ENGINE_REQUIRED\n120 - CANNOT_INSERT_VALUE_OF_DIFFERENT_SIZE_INTO_TUPLE\n121 - UNSUPPORTED_JOIN_KEYS\n122 - INCOMPATIBLE_COLUMNS\n123 - UNKNOWN_TYPE_OF_AST_NODE\n124 - INCORRECT_ELEMENT_OF_SET\n125 - INCORRECT_RESULT_OF_SCALAR_SUBQUERY\n127 - ILLEGAL_INDEX\n128 - TOO_LARGE_ARRAY_SIZE\n129 - FUNCTION_IS_SPECIAL\n130 - CANNOT_READ_ARRAY_FROM_TEXT\n131 - TOO_LARGE_STRING_SIZE\n133 - AGGREGATE_FUNCTION_DOESNT_ALLOW_PARAMETERS\n134 - PARAMETERS_TO_AGGREGATE_FUNCTIONS_MUST_BE_LITERALS\n135 - ZERO_ARRAY_OR_TUPLE_INDEX\n137 - UNKNOWN_ELEMENT_IN_CONFIG\n138 - EXCESSIVE_ELEMENT_IN_CONFIG\n139 - NO_ELEMENTS_IN_CONFIG\n141 - SAMPLING_NOT_SUPPORTED\n142 - NOT_FOUND_NODE\n145 - UNKNOWN_OVERFLOW_MODE\n152 - UNKNOWN_DIRECTION_OF_SORTING\n153 - ILLEGAL_DIVISION\n156 - DICTIONARIES_WAS_NOT_LOADED\n158 - TOO_MANY_ROWS\n159 - TIMEOUT_EXCEEDED\n160 - TOO_SLOW\n161 - TOO_MANY_COLUMNS\n162 - TOO_DEEP_SUBQUERIES\n164 - READONLY\n165 - TOO_MANY_TEMPORARY_COLUMNS\n166 - TOO_MANY_TEMPORARY_NON_CONST_COLUMNS\n167 - TOO_DEEP_AST\n168 - TOO_BIG_AST\n169 - BAD_TYPE_OF_FIELD\n170 - BAD_GET\n172 - CANNOT_CREATE_DIRECTORY\n173 - CANNOT_ALLOCATE_MEMORY\n174 - CYCLIC_ALIASES\n179 - MULTIPLE_EXPRESSIONS_FOR_ALIAS\n180 - THERE_IS_NO_PROFILE\n181 - ILLEGAL_FINAL\n182 - ILLEGAL_PREWHERE\n183 - UNEXPECTED_EXPRESSION\n184 - ILLEGAL_AGGREGATION\n186 - UNSUPPORTED_COLLATION_LOCALE\n187 - COLLATION_COMPARISON_FAILED\n190 - SIZES_OF_ARRAYS_DONT_MATCH\n191 - SET_SIZE_LIMIT_EXCEEDED\n192 - UNKNOWN_USER\n193 - WRONG_PASSWORD\n194 - REQUIRED_PASSWORD\n195 - IP_ADDRESS_NOT_ALLOWED\n196 - UNKNOWN_ADDRESS_PATTERN_TYPE\n198 - DNS_ERROR\n199 - UNKNOWN_QUOTA\n201 - QUOTA_EXCEEDED\n202 - TOO_MANY_SIMULTANEOUS_QUERIES\n203 - NO_FREE_CONNECTION\n204 - CANNOT_FSYNC\n206 - ALIAS_REQUIRED\n207 - AMBIGUOUS_IDENTIFIER\n208 - EMPTY_NESTED_TABLE\n209 - SOCKET_TIMEOUT\n210 - NETWORK_ERROR\n211 - EMPTY_QUERY\n212 - UNKNOWN_LOAD_BALANCING\n213 - UNKNOWN_TOTALS_MODE\n214 - CANNOT_STATVFS\n215 - NOT_AN_AGGREGATE\n216 - QUERY_WITH_SAME_ID_IS_ALREADY_RUNNING\n217 - CLIENT_HAS_CONNECTED_TO_WRONG_PORT\n218 - TABLE_IS_DROPPED\n219 - DATABASE_NOT_EMPTY\n220 - DUPLICATE_INTERSERVER_IO_ENDPOINT\n221 - NO_SUCH_INTERSERVER_IO_ENDPOINT\n223 - UNEXPECTED_AST_STRUCTURE\n224 - REPLICA_IS_ALREADY_ACTIVE\n225 - NO_ZOOKEEPER\n226 - NO_FILE_IN_DATA_PART\n227 - UNEXPECTED_FILE_IN_DATA_PART\n228 - BAD_SIZE_OF_FILE_IN_DATA_PART\n229 - QUERY_IS_TOO_LARGE\n230 - NOT_FOUND_EXPECTED_DATA_PART\n231 - TOO_MANY_UNEXPECTED_DATA_PARTS\n232 - NO_SUCH_DATA_PART\n233 - BAD_DATA_PART_NAME\n234 - NO_REPLICA_HAS_PART\n235 - DUPLICATE_DATA_PART\n236 - ABORTED\n237 - NO_REPLICA_NAME_GIVEN\n238 - FORMAT_VERSION_TOO_OLD\n239 - CANNOT_MUNMAP\n240 - CANNOT_MREMAP\n241 - MEMORY_LIMIT_EXCEEDED\n242 - TABLE_IS_READ_ONLY\n243 - NOT_ENOUGH_SPACE\n244 - UNEXPECTED_ZOOKEEPER_ERROR\n246 - CORRUPTED_DATA\n248 - INVALID_PARTITION_VALUE\n251 - NO_SUCH_REPLICA\n252 - TOO_MANY_PARTS\n253 - REPLICA_ALREADY_EXISTS\n254 - NO_ACTIVE_REPLICAS\n255 - TOO_MANY_RETRIES_TO_FETCH_PARTS\n256 - PARTITION_ALREADY_EXISTS\n257 - PARTITION_DOESNT_EXIST\n258 - UNION_ALL_RESULT_STRUCTURES_MISMATCH\n260 - CLIENT_OUTPUT_FORMAT_SPECIFIED\n261 - UNKNOWN_BLOCK_INFO_FIELD\n262 - BAD_COLLATION\n263 - CANNOT_COMPILE_CODE\n264 - INCOMPATIBLE_TYPE_OF_JOIN\n265 - NO_AVAILABLE_REPLICA\n266 - MISMATCH_REPLICAS_DATA_SOURCES\n269 - INFINITE_LOOP\n270 - CANNOT_COMPRESS\n271 - CANNOT_DECOMPRESS\n272 - CANNOT_IO_SUBMIT\n273 - CANNOT_IO_GETEVENTS\n274 - AIO_READ_ERROR\n275 - AIO_WRITE_ERROR\n277 - INDEX_NOT_USED\n279 - ALL_CONNECTION_TRIES_FAILED\n280 - NO_AVAILABLE_DATA\n281 - DICTIONARY_IS_EMPTY\n282 - INCORRECT_INDEX\n283 - UNKNOWN_DISTRIBUTED_PRODUCT_MODE\n284 - WRONG_GLOBAL_SUBQUERY\n285 - TOO_FEW_LIVE_REPLICAS\n286 - UNSATISFIED_QUORUM_FOR_PREVIOUS_WRITE\n287 - UNKNOWN_FORMAT_VERSION\n288 - DISTRIBUTED_IN_JOIN_SUBQUERY_DENIED\n289 - REPLICA_IS_NOT_IN_QUORUM\n290 - LIMIT_EXCEEDED\n291 - DATABASE_ACCESS_DENIED\n293 - MONGODB_CANNOT_AUTHENTICATE\n295 - RECEIVED_EMPTY_DATA\n297 - SHARD_HAS_NO_CONNECTIONS\n298 - CANNOT_PIPE\n299 - CANNOT_FORK\n300 - CANNOT_DLSYM\n301 - CANNOT_CREATE_CHILD_PROCESS\n302 - CHILD_WAS_NOT_EXITED_NORMALLY\n303 - CANNOT_SELECT\n304 - CANNOT_WAITPID\n305 - TABLE_WAS_NOT_DROPPED\n306 - TOO_DEEP_RECURSION\n307 - TOO_MANY_BYTES\n308 - UNEXPECTED_NODE_IN_ZOOKEEPER\n309 - FUNCTION_CANNOT_HAVE_PARAMETERS\n318 - INVALID_CONFIG_PARAMETER\n319 - UNKNOWN_STATUS_OF_INSERT\n321 - VALUE_IS_OUT_OF_RANGE_OF_DATA_TYPE\n336 - UNKNOWN_DATABASE_ENGINE\n341 - UNFINISHED\n342 - METADATA_MISMATCH\n344 - SUPPORT_IS_DISABLED\n345 - TABLE_DIFFERS_TOO_MUCH\n346 - CANNOT_CONVERT_CHARSET\n347 - CANNOT_LOAD_CONFIG\n349 - CANNOT_INSERT_NULL_IN_ORDINARY_COLUMN\n352 - AMBIGUOUS_COLUMN_NAME\n353 - INDEX_OF_POSITIONAL_ARGUMENT_IS_OUT_OF_RANGE\n354 - ZLIB_INFLATE_FAILED\n355 - ZLIB_DEFLATE_FAILED\n358 - INTO_OUTFILE_NOT_ALLOWED\n359 - TABLE_SIZE_EXCEEDS_MAX_DROP_SIZE_LIMIT\n360 - CANNOT_CREATE_CHARSET_CONVERTER\n361 - SEEK_POSITION_OUT_OF_BOUND\n362 - CURRENT_WRITE_BUFFER_IS_EXHAUSTED\n363 - CANNOT_CREATE_IO_BUFFER\n364 - RECEIVED_ERROR_TOO_MANY_REQUESTS\n366 - SIZES_OF_NESTED_COLUMNS_ARE_INCONSISTENT\n369 - ALL_REPLICAS_ARE_STALE\n370 - DATA_TYPE_CANNOT_BE_USED_IN_TABLES\n371 - INCONSISTENT_CLUSTER_DEFINITION\n372 - SESSION_NOT_FOUND\n373 - SESSION_IS_LOCKED\n374 - INVALID_SESSION_TIMEOUT\n375 - CANNOT_DLOPEN\n376 - CANNOT_PARSE_UUID\n377 - ILLEGAL_SYNTAX_FOR_DATA_TYPE\n378 - DATA_TYPE_CANNOT_HAVE_ARGUMENTS\n380 - CANNOT_KILL\n381 - HTTP_LENGTH_REQUIRED\n382 - CANNOT_LOAD_CATBOOST_MODEL\n383 - CANNOT_APPLY_CATBOOST_MODEL\n384 - PART_IS_TEMPORARILY_LOCKED\n385 - MULTIPLE_STREAMS_REQUIRED\n386 - NO_COMMON_TYPE\n387 - DICTIONARY_ALREADY_EXISTS\n388 - CANNOT_ASSIGN_OPTIMIZE\n389 - INSERT_WAS_DEDUPLICATED\n390 - CANNOT_GET_CREATE_TABLE_QUERY\n391 - EXTERNAL_LIBRARY_ERROR\n392 - QUERY_IS_PROHIBITED\n393 - THERE_IS_NO_QUERY\n394 - QUERY_WAS_CANCELLED\n395 - FUNCTION_THROW_IF_VALUE_IS_NON_ZERO\n396 - TOO_MANY_ROWS_OR_BYTES\n397 - QUERY_IS_NOT_SUPPORTED_IN_MATERIALIZED_VIEW\n398 - UNKNOWN_MUTATION_COMMAND\n399 - FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT\n400 - CANNOT_STAT\n401 - FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME\n402 - CANNOT_IOSETUP\n403 - INVALID_JOIN_ON_EXPRESSION\n404 - BAD_ODBC_CONNECTION_STRING\n406 - TOP_AND_LIMIT_TOGETHER\n407 - DECIMAL_OVERFLOW\n408 - BAD_REQUEST_PARAMETER\n410 - EXTERNAL_SERVER_IS_NOT_RESPONDING\n411 - PTHREAD_ERROR\n412 - NETLINK_ERROR\n413 - CANNOT_SET_SIGNAL_HANDLER\n415 - ALL_REPLICAS_LOST\n416 - REPLICA_STATUS_CHANGED\n417 - EXPECTED_ALL_OR_ANY\n418 - UNKNOWN_JOIN\n419 - MULTIPLE_ASSIGNMENTS_TO_COLUMN\n420 - CANNOT_UPDATE_COLUMN\n421 - CANNOT_ADD_DIFFERENT_AGGREGATE_STATES\n422 - UNSUPPORTED_URI_SCHEME\n423 - CANNOT_GETTIMEOFDAY\n424 - CANNOT_LINK\n425 - SYSTEM_ERROR\n427 - CANNOT_COMPILE_REGEXP\n429 - FAILED_TO_GETPWUID\n430 - MISMATCHING_USERS_FOR_PROCESS_AND_DATA\n431 - ILLEGAL_SYNTAX_FOR_CODEC_TYPE\n432 - UNKNOWN_CODEC\n433 - ILLEGAL_CODEC_PARAMETER\n434 - CANNOT_PARSE_PROTOBUF_SCHEMA\n435 - NO_COLUMN_SERIALIZED_TO_REQUIRED_PROTOBUF_FIELD\n436 - PROTOBUF_BAD_CAST\n437 - PROTOBUF_FIELD_NOT_REPEATED\n438 - DATA_TYPE_CANNOT_BE_PROMOTED\n439 - CANNOT_SCHEDULE_TASK\n440 - INVALID_LIMIT_EXPRESSION\n441 - CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING\n442 - BAD_DATABASE_FOR_TEMPORARY_TABLE\n443 - NO_COLUMNS_SERIALIZED_TO_PROTOBUF_FIELDS\n444 - UNKNOWN_PROTOBUF_FORMAT\n445 - CANNOT_MPROTECT\n446 - FUNCTION_NOT_ALLOWED\n447 - HYPERSCAN_CANNOT_SCAN_TEXT\n448 - BROTLI_READ_FAILED\n449 - BROTLI_WRITE_FAILED\n450 - BAD_TTL_EXPRESSION\n451 - BAD_TTL_FILE\n452 - SETTING_CONSTRAINT_VIOLATION\n453 - MYSQL_CLIENT_INSUFFICIENT_CAPABILITIES\n454 - OPENSSL_ERROR\n455 - SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY\n456 - UNKNOWN_QUERY_PARAMETER\n457 - BAD_QUERY_PARAMETER\n458 - CANNOT_UNLINK\n459 - CANNOT_SET_THREAD_PRIORITY\n460 - CANNOT_CREATE_TIMER\n461 - CANNOT_SET_TIMER_PERIOD\n463 - CANNOT_FCNTL\n464 - CANNOT_PARSE_ELF\n465 - CANNOT_PARSE_DWARF\n466 - INSECURE_PATH\n467 - CANNOT_PARSE_BOOL\n468 - CANNOT_PTHREAD_ATTR\n469 - VIOLATED_CONSTRAINT\n470 - QUERY_IS_NOT_SUPPORTED_IN_LIVE_VIEW\n471 - INVALID_SETTING_VALUE\n472 - READONLY_SETTING\n473 - DEADLOCK_AVOIDED\n474 - INVALID_TEMPLATE_FORMAT\n475 - INVALID_WITH_FILL_EXPRESSION\n476 - WITH_TIES_WITHOUT_ORDER_BY\n477 - INVALID_USAGE_OF_INPUT\n478 - UNKNOWN_POLICY\n479 - UNKNOWN_DISK\n480 - UNKNOWN_PROTOCOL\n481 - PATH_ACCESS_DENIED\n482 - DICTIONARY_ACCESS_DENIED\n483 - TOO_MANY_REDIRECTS\n484 - INTERNAL_REDIS_ERROR\n487 - CANNOT_GET_CREATE_DICTIONARY_QUERY\n489 - INCORRECT_DICTIONARY_DEFINITION\n490 - CANNOT_FORMAT_DATETIME\n491 - UNACCEPTABLE_URL\n492 - ACCESS_ENTITY_NOT_FOUND\n493 - ACCESS_ENTITY_ALREADY_EXISTS\n495 - ACCESS_STORAGE_READONLY\n496 - QUOTA_REQUIRES_CLIENT_KEY\n497 - ACCESS_DENIED\n498 - LIMIT_BY_WITH_TIES_IS_NOT_SUPPORTED\n499 - S3_ERROR\n500 - AZURE_BLOB_STORAGE_ERROR\n501 - CANNOT_CREATE_DATABASE\n502 - CANNOT_SIGQUEUE\n503 - AGGREGATE_FUNCTION_THROW\n504 - FILE_ALREADY_EXISTS\n507 - UNABLE_TO_SKIP_UNUSED_SHARDS\n508 - UNKNOWN_ACCESS_TYPE\n509 - INVALID_GRANT\n510 - CACHE_DICTIONARY_UPDATE_FAIL\n511 - UNKNOWN_ROLE\n512 - SET_NON_GRANTED_ROLE\n513 - UNKNOWN_PART_TYPE\n514 - ACCESS_STORAGE_FOR_INSERTION_NOT_FOUND\n515 - INCORRECT_ACCESS_ENTITY_DEFINITION\n516 - AUTHENTICATION_FAILED\n517 - CANNOT_ASSIGN_ALTER\n518 - CANNOT_COMMIT_OFFSET\n519 - NO_REMOTE_SHARD_AVAILABLE\n520 - CANNOT_DETACH_DICTIONARY_AS_TABLE\n521 - ATOMIC_RENAME_FAIL\n523 - UNKNOWN_ROW_POLICY\n524 - ALTER_OF_COLUMN_IS_FORBIDDEN\n525 - INCORRECT_DISK_INDEX\n527 - NO_SUITABLE_FUNCTION_IMPLEMENTATION\n528 - CASSANDRA_INTERNAL_ERROR\n529 - NOT_A_LEADER\n530 - CANNOT_CONNECT_RABBITMQ\n531 - CANNOT_FSTAT\n532 - LDAP_ERROR\n535 - UNKNOWN_RAID_TYPE\n536 - CANNOT_RESTORE_FROM_FIELD_DUMP\n537 - ILLEGAL_MYSQL_VARIABLE\n538 - MYSQL_SYNTAX_ERROR\n539 - CANNOT_BIND_RABBITMQ_EXCHANGE\n540 - CANNOT_DECLARE_RABBITMQ_EXCHANGE\n541 - CANNOT_CREATE_RABBITMQ_QUEUE_BINDING\n542 - CANNOT_REMOVE_RABBITMQ_EXCHANGE\n543 - UNKNOWN_MYSQL_DATATYPES_SUPPORT_LEVEL\n544 - ROW_AND_ROWS_TOGETHER\n545 - FIRST_AND_NEXT_TOGETHER\n546 - NO_ROW_DELIMITER\n547 - INVALID_RAID_TYPE\n548 - UNKNOWN_VOLUME\n549 - DATA_TYPE_CANNOT_BE_USED_IN_KEY\n552 - UNRECOGNIZED_ARGUMENTS\n553 - LZMA_STREAM_ENCODER_FAILED\n554 - LZMA_STREAM_DECODER_FAILED\n555 - ROCKSDB_ERROR\n556 - SYNC_MYSQL_USER_ACCESS_ERROR\n557 - UNKNOWN_UNION\n558 - EXPECTED_ALL_OR_DISTINCT\n559 - INVALID_GRPC_QUERY_INFO\n560 - ZSTD_ENCODER_FAILED\n561 - ZSTD_DECODER_FAILED\n562 - TLD_LIST_NOT_FOUND\n563 - CANNOT_READ_MAP_FROM_TEXT\n564 - INTERSERVER_SCHEME_DOESNT_MATCH\n565 - TOO_MANY_PARTITIONS\n566 - CANNOT_RMDIR\n567 - DUPLICATED_PART_UUIDS\n568 - RAFT_ERROR\n569 - MULTIPLE_COLUMNS_SERIALIZED_TO_SAME_PROTOBUF_FIELD\n570 - DATA_TYPE_INCOMPATIBLE_WITH_PROTOBUF_FIELD\n571 - DATABASE_REPLICATION_FAILED\n572 - TOO_MANY_QUERY_PLAN_OPTIMIZATIONS\n573 - EPOLL_ERROR\n574 - DISTRIBUTED_TOO_MANY_PENDING_BYTES\n575 - UNKNOWN_SNAPSHOT\n576 - KERBEROS_ERROR\n577 - INVALID_SHARD_ID\n578 - INVALID_FORMAT_INSERT_QUERY_WITH_DATA\n579 - INCORRECT_PART_TYPE\n580 - CANNOT_SET_ROUNDING_MODE\n581 - TOO_LARGE_DISTRIBUTED_DEPTH\n582 - NO_SUCH_PROJECTION_IN_TABLE\n583 - ILLEGAL_PROJECTION\n584 - PROJECTION_NOT_USED\n585 - CANNOT_PARSE_YAML\n586 - CANNOT_CREATE_FILE\n587 - CONCURRENT_ACCESS_NOT_SUPPORTED\n588 - DISTRIBUTED_BROKEN_BATCH_INFO\n589 - DISTRIBUTED_BROKEN_BATCH_FILES\n590 - CANNOT_SYSCONF\n591 - SQLITE_ENGINE_ERROR\n592 - DATA_ENCRYPTION_ERROR\n593 - ZERO_COPY_REPLICATION_ERROR\n594 - BZIP2_STREAM_DECODER_FAILED\n595 - BZIP2_STREAM_ENCODER_FAILED\n596 - INTERSECT_OR_EXCEPT_RESULT_STRUCTURES_MISMATCH\n597 - NO_SUCH_ERROR_CODE\n598 - BACKUP_ALREADY_EXISTS\n599 - BACKUP_NOT_FOUND\n600 - BACKUP_VERSION_NOT_SUPPORTED\n601 - BACKUP_DAMAGED\n602 - NO_BASE_BACKUP\n603 - WRONG_BASE_BACKUP\n604 - BACKUP_ENTRY_ALREADY_EXISTS\n605 - BACKUP_ENTRY_NOT_FOUND\n606 - BACKUP_IS_EMPTY\n607 - CANNOT_RESTORE_DATABASE\n608 - CANNOT_RESTORE_TABLE\n609 - FUNCTION_ALREADY_EXISTS\n610 - CANNOT_DROP_FUNCTION\n611 - CANNOT_CREATE_RECURSIVE_FUNCTION\n614 - POSTGRESQL_CONNECTION_FAILURE\n615 - CANNOT_ADVISE\n616 - UNKNOWN_READ_METHOD\n617 - LZ4_ENCODER_FAILED\n618 - LZ4_DECODER_FAILED\n619 - POSTGRESQL_REPLICATION_INTERNAL_ERROR\n620 - QUERY_NOT_ALLOWED\n621 - CANNOT_NORMALIZE_STRING\n622 - CANNOT_PARSE_CAPN_PROTO_SCHEMA\n623 - CAPN_PROTO_BAD_CAST\n624 - BAD_FILE_TYPE\n625 - IO_SETUP_ERROR\n626 - CANNOT_SKIP_UNKNOWN_FIELD\n627 - BACKUP_ENGINE_NOT_FOUND\n628 - OFFSET_FETCH_WITHOUT_ORDER_BY\n629 - HTTP_RANGE_NOT_SATISFIABLE\n630 - HAVE_DEPENDENT_OBJECTS\n631 - UNKNOWN_FILE_SIZE\n632 - UNEXPECTED_DATA_AFTER_PARSED_VALUE\n633 - QUERY_IS_NOT_SUPPORTED_IN_WINDOW_VIEW\n634 - MONGODB_ERROR\n635 - CANNOT_POLL\n636 - CANNOT_EXTRACT_TABLE_STRUCTURE\n637 - INVALID_TABLE_OVERRIDE\n638 - SNAPPY_UNCOMPRESS_FAILED\n639 - SNAPPY_COMPRESS_FAILED\n640 - NO_HIVEMETASTORE\n641 - CANNOT_APPEND_TO_FILE\n642 - CANNOT_PACK_ARCHIVE\n643 - CANNOT_UNPACK_ARCHIVE\n645 - NUMBER_OF_DIMENSIONS_MISMATCHED\n647 - CANNOT_BACKUP_TABLE\n648 - WRONG_DDL_RENAMING_SETTINGS\n649 - INVALID_TRANSACTION\n650 - SERIALIZATION_ERROR\n651 - CAPN_PROTO_BAD_TYPE\n652 - ONLY_NULLS_WHILE_READING_SCHEMA\n653 - CANNOT_PARSE_BACKUP_SETTINGS\n654 - WRONG_BACKUP_SETTINGS\n655 - FAILED_TO_SYNC_BACKUP_OR_RESTORE\n659 - UNKNOWN_STATUS_OF_TRANSACTION\n660 - HDFS_ERROR\n661 - CANNOT_SEND_SIGNAL\n662 - FS_METADATA_ERROR\n663 - INCONSISTENT_METADATA_FOR_BACKUP\n664 - ACCESS_STORAGE_DOESNT_ALLOW_BACKUP\n665 - CANNOT_CONNECT_NATS\n667 - NOT_INITIALIZED\n668 - INVALID_STATE\n669 - NAMED_COLLECTION_DOESNT_EXIST\n670 - NAMED_COLLECTION_ALREADY_EXISTS\n671 - NAMED_COLLECTION_IS_IMMUTABLE\n672 - INVALID_SCHEDULER_NODE\n673 - RESOURCE_ACCESS_DENIED\n674 - RESOURCE_NOT_FOUND\n675 - CANNOT_PARSE_IPV4\n676 - CANNOT_PARSE_IPV6\n677 - THREAD_WAS_CANCELED\n678 - IO_URING_INIT_FAILED\n679 - IO_URING_SUBMIT_ERROR\n690 - MIXED_ACCESS_PARAMETER_TYPES\n691 - UNKNOWN_ELEMENT_OF_ENUM\n692 - TOO_MANY_MUTATIONS\n693 - AWS_ERROR\n694 - ASYNC_LOAD_CYCLE\n695 - ASYNC_LOAD_FAILED\n696 - ASYNC_LOAD_CANCELED\n697 - CANNOT_RESTORE_TO_NONENCRYPTED_DISK\n698 - INVALID_REDIS_STORAGE_TYPE\n699 - INVALID_REDIS_TABLE_STRUCTURE\n700 - USER_SESSION_LIMIT_EXCEEDED\n701 - CLUSTER_DOESNT_EXIST\n702 - CLIENT_INFO_DOES_NOT_MATCH\n703 - INVALID_IDENTIFIER\n704 - QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS\n705 - TABLE_NOT_EMPTY\n706 - LIBSSH_ERROR\n707 - GCP_ERROR\n999 - KEEPER_EXCEPTION\n1000 - POCO_EXCEPTION\n1001 - STD_EXCEPTION\n1002 - UNKNOWN_EXCEPTION\n\n\n\n\n\n","category":"type"},{"location":"#OhMyCH.jl","page":"Home","title":"OhMyCH.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia Typed Client for ClickHouse DB","category":"page"},{"location":"","page":"Home","title":"Home","text":"ClickHouse Type Julia Type Supported for Input Supported for Output\nBool Bool ✓ ✓\nInt8-128, UInt8-128 Int8-128, UInt8-128 ✓ ✓\nFloat32, Float64 Float32, Float64 ✓ ✓\nDecimal(P,S) Decimal{P,S} ✓ ✓\nString String ✓ ✓\nFixedString(N) FixedString{N} ✓ ✓\nDate Date ✓ ✓\nDateTime DateTime ✓ ✓\nDateTime64 NanoDate ✓ ✓\nEnum8, Enum16 UInt8, UInt16 ✓ ✓\nUUID UUID ✓ ✓\nIPv4, IPv6 IPv4, IPv6 ✓ ✓\nArray(T) AbstractVector{T} ✓ ✓\nTuple(T1, T2, ...) Tuple ✓ ✓\nMap(K, V) AbstractDict{K,V} ✓ ✓\nLowCardinality(T) T ✓ ✓\nNullable(T) Union{Nothing,T} ✓ ✓","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you haven't installed our local registry yet, do that first:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] registry add https://github.com/bhftbootcamp/Green.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, to install OhMyCH, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add OhMyCH","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Connect to a ClickHouse server using ohmych_connect:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OhMyCH\n\nclient = ohmych_connect(\n    \"http://127.0.0.1:8123/\",\n    \"analytics_db\",\n    \"analytics_user\",\n    \"OhMyCH@2025!\",\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples below use the following table as a reference schema:","category":"page"},{"location":"","page":"Home","title":"Home","text":"CREATE TABLE IF NOT EXISTS my_trades (\n    timestamp DateTime64(9),\n    trade_id  UInt64,\n    symbol    LowCardinality(String),\n    side      Enum8('Bid' = 0, 'Ask' = 1),\n    price     Decimal(34, 18),\n    qty       Float64\n) ENGINE = MergeTree()\nPARTITION BY toYYYYMM(timestamp)\nORDER BY timestamp","category":"page"},{"location":"","page":"Home","title":"Home","text":"Execute CREATE, ALTER, DROP, or TRUNCATE DDL commands with execute. For example, renaming a column:","category":"page"},{"location":"","page":"Home","title":"Home","text":"OhMyCH.execute(\n    client,\n    \"ALTER TABLE my_trades RENAME COLUMN qty TO quantity\",\n    # parameters,\n    # options...,\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use insert to insert data into tables. Here is an example of inserting multiple rows at once:","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct MyTrade\n    timestamp::NanoDate\n    trade_id::UInt64\n    symbol::String\n    side::UInt8\n    price::Decimal{34,18}\n    quantity::Float64\nend\n\nOhMyCH.insert(\n    client,\n    \"INSERT INTO my_trades (timestamp, trade_id, symbol, side, price, quantity)\",\n    MyTrade[\n        MyTrade(NanoDate(\"2025-01-15T08:00:00.123456789\"), 1, \"AAPL\", UInt8(1), Decimal{34,18}(\"145.321234567890123456\"), 100.0),\n        MyTrade(NanoDate(\"2025-01-15T08:05:00.987654321\"), 2, \"GOOG\", UInt8(0), Decimal{34,18}(\"2745.50000000000000000\"), 50.0),\n        MyTrade(NanoDate(\"2025-01-15T08:10:00.111222333\"), 3, \"TSLA\", UInt8(0), Decimal{34,18}(\"652.801234567890123456\"), 200.0),\n        MyTrade(NanoDate(\"2025-01-15T08:15:00.444555666\"), 4, \"AMZN\", UInt8(1), Decimal{34,18}(\"3301.65000000000000000\"), 30.0)\n    ],\n    chunk_size = 1024 * 1024, # 1 Mbyte\n    # options...,\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use query to execute a query and get results in RowBinaryWithNamesAndTypes, which can be easily converted to a NamedTuple without needing field metadata.","category":"page"},{"location":"","page":"Home","title":"Home","text":"query_result = OhMyCH.query(\n    client,\n    \"SELECT * FROM my_trades WHERE quantity >= {quantity:Float64}\",\n    (quantity = 100, ),\n    # options...,\n)\n\njulia> collect(query_result)\n2-element Vector{NamedTuple{(:timestamp, :trade_id, :symbol, :side, :price, :quantity),Tuple{NanoDate,UInt64,String,UInt8,Decimal{34,18},Float64}}}:\n (2025-01-15T08:00:00.123456789, 0x0000000000000001, \"AAPL\", 0x01, Decimal{34,18}(145.321234567890123456), 100.0)\n (2025-01-15T08:10:00.111222333, 0x0000000000000003, \"TSLA\", 0x00, Decimal{34,18}(652.801234567890123456), 200.0)\n\njulia> collect(MyTrade, query_result)\n2-element Vector{MyTrade}:\n MyTrade(2025-01-15T08:00:00.123456789, 0x0000000000000001, \"AAPL\", 0x01, Decimal{34,18}(145.321234567890123456), 100.0)\n MyTrade(2025-01-15T08:10:00.111222333, 0x0000000000000003, \"TSLA\", 0x00, Decimal{34,18}(652.801234567890123456), 200.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use query_binary for binary results, ideal for performance-critical applications. Deserialize the data into your custom type as needed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe responsibility for correctly matching the deserialized types lies with the developer. If the types do not align, the deserialization may fail or produce incorrect results. This trade-off allows query_binary to excel in scenarios where performance is critical and the schema is well-known.","category":"page"},{"location":"","page":"Home","title":"Home","text":"query_result = OhMyCH.query_binary(\n    client,\n    \"SELECT * FROM my_trades WHERE quantity >= {quantity:Float64}\",\n    (quantity = 100, ),\n    # options...,\n)\n\njulia> for item in eachrow(MyTrade, query_result)\n           println(item)\n       end\nMyTrade(2025-01-15T08:00:00.123456789, 0x0000000000000001, \"AAPL\", 0x01, Decimal{34,18}(145.321234567890123456), 100.0)\nMyTrade(2025-01-15T08:10:00.111222333, 0x0000000000000003, \"TSLA\", 0x00, Decimal{34,18}(652.801234567890123456), 200.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nAlways close the client after you’re done:","category":"page"},{"location":"","page":"Home","title":"Home","text":"try\n    # Perform operations\nfinally\n    close(client)\nend","category":"page"},{"location":"pages/advanced/#For-Developers","page":"For Developers","title":"For Developers","text":"","category":"section"},{"location":"pages/advanced/","page":"For Developers","title":"For Developers","text":"This section contains various information that may be useful for developing and understanding the package in more detail.","category":"page"},{"location":"pages/advanced/#Data-Flow","page":"For Developers","title":"Data Flow","text":"","category":"section"},{"location":"pages/advanced/","page":"For Developers","title":"For Developers","text":"The following diagram illustrates the process of data handling in OhMyCH, including iteration, deserialization, and returning data to the user:","category":"page"},{"location":"pages/advanced/","page":"For Developers","title":"For Developers","text":"                              +-------------------+\n                              |   Input Data      |\n                              |  (Vector{UInt8})  |\n                              +-------------------+\n                                       |\n                +----------------------+-----------------------+\n                |                                              |\n +---------------------------+               +------------------------------------+\n |         RowBinary         |               |     RowBinaryWithNamesAndTypes     |\n +---------------------------+               +------------------------------------+\n                |                                              |\n                v                                              v\n +---------------------------+               +------------------------------------+\n |        User type `T`      |               |    Parse Column Names and Types    |\n |   (e.g., `T` or `Tuple`)  |               |                                    |\n +---------------------------+               +------------------------------------+\n                |                                              |\n                +----------------------+-----------------------+\n                                       |\n                                       v\n                              +-------------------+\n                  +---------> |  Start Iteration  |\n                  |           +-------------------+\n                  |                    |\n                  |                    v\n                  |           +-------------------+\n                  |           | Read Binary Chunk |\n                  |           +-------------------+\n                  |                    |\n                  |                    v\n                  |           +-------------------+\n                  |           |  Deserialize Row  |\n                  |           +-------------------+\n                  |                    |\n                  |                    v\n                  |           +-------------------+\n                  |           | Return Row to User|\n                  |           +-------------------+\n                  |                    |\n                  |                    v\n                  |           +-------------------+\n                  |           |   Check for EOF   |\n                  |           |   - More Data?    |\n                  |           +-------------------+\n                  |                    |\n                  +--------------------+\n                                       |\n                                       v\n                             +-------------------+\n                             |   End Iteration   |\n                             +-------------------+","category":"page"},{"location":"pages/advanced/#Serializer","page":"For Developers","title":"Serializer","text":"","category":"section"},{"location":"pages/advanced/#OhMyCH.Serializer","page":"For Developers","title":"OhMyCH.Serializer","text":"Serializer{I<:IO}\n\nCustom IO wrapper for (de)serializing binary data streams.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#OhMyCH.serialize","page":"For Developers","title":"OhMyCH.serialize","text":"serialize(s::Serializer, value::T) -> Int\n\nWrites the byte representation of value to buffer s.\n\nExamples\n\njulia> using ClickHouse: Serializer, serialize, deserialize\n\njulia> s = Serializer();\n\njulia> serialize(s, UInt8, UInt8(10))\n1\n\njulia> serialize(s, Int32, Int32(100))\n4\n\njulia> serialize(s, Float64, Float64(1000.0))\n8\n\njulia> serialize(s, String, \"Hello, World!!!\")\n16\n\njulia> seekstart(s.io);\n\njulia> deserialize(s, UInt8)\n0x0a\n\njulia> deserialize(s, Int32)\n100\n\njulia> deserialize(s, Float64)\n1000.0\n\njulia> deserialize(s, String)\n\"Hello, World!!!\"\n\n\n\n\n\n","category":"function"},{"location":"pages/advanced/#OhMyCH.deserialize","page":"For Developers","title":"OhMyCH.deserialize","text":"deserialize(s::Serializer, T::Type) -> T\n\nReads a sequence of bytes corresponding to type T from buffer s, and then creates an object from them.\n\nExamples\n\njulia> using ClickHouse: Serializer, serialize, deserialize\n\njulia> s = Serializer([0x0a, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40]);\n\njulia> deserialize(s, UInt8)\n0x0a\n\njulia> deserialize(s, Int32)\n100\n\njulia> deserialize(s, Float64)\n1000.0\n\n\n\n\n\n","category":"function"},{"location":"pages/advanced/#supported_formats","page":"For Developers","title":"Binary formats","text":"","category":"section"},{"location":"pages/advanced/#OhMyCH.RowBinaryResult","page":"For Developers","title":"OhMyCH.RowBinaryResult","text":"RowBinaryResult\n\nAbstract supertype for all row binary data results.\n\nThis type is a base for binary data representations, such as RowBinary and RowBinaryWithNamesAndTypes.\n\nSee Also\n\nRowBinary\nRowBinaryWithNamesAndTypes\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#OhMyCH.RowBinary","page":"For Developers","title":"OhMyCH.RowBinary","text":"RowBinary <: RowBinaryResult\n\nThis format represents binary rows of data, without specifying their types and names. Data can be extracted using the eachrow or collect methods with the column types specified.\n\nSee more in ClickHouse Docs.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#OhMyCH.RowBinaryWithNamesAndTypes","page":"For Developers","title":"OhMyCH.RowBinaryWithNamesAndTypes","text":"RowBinaryWithNamesAndTypes <: RowBinaryResult\n\nThis format represents binary rows of data containing information about column types and their names. Data can be extracted using the eachrow or collect methods.\n\nSee more in ClickHouse Docs.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#Column-types","page":"For Developers","title":"Column types","text":"","category":"section"},{"location":"pages/advanced/#OhMyCH.parse_column_type","page":"For Developers","title":"OhMyCH.parse_column_type","text":"parse_column_type(type_str::String)\n\nParses a ClickHouse-like type string and returns the corresponding Julia type.\n\nSee also Supported column types.\n\nExamples\n\njulia> parse_column_type(\"LowCardinality(String)\")\nString\n\njulia> parse_column_type(\"Nullable(Decimal(9,2))\")\nUnion{Nothing,Decimal{9,2}}\n\njulia> parse_column_type(\"Array(Tuple(Int8, UInt16))\")\nVector{Tuple{Int8,UInt16}}\n\n\n\n\n\n","category":"function"},{"location":"pages/advanced/#Binary-iterators","page":"For Developers","title":"Binary iterators","text":"","category":"section"},{"location":"pages/advanced/#OhMyCH.RowToBinaryIter","page":"For Developers","title":"OhMyCH.RowToBinaryIter","text":"RowToBinaryIter{T}\n\nIterator for converting rows into serialized binary data in chunks.\n\nFields\n\nitems::AbstractVector{T}: Collection of rows to be serialized.\nchunk_size::Int: Maximum size of serialized chunk in bytes.\nserializer::Serializer: Serializer used to encode rows.\ncurrent_start::Int: Current position in the list of items.\nitems_per_chunk::Int: Number of rows (items) included in a single chunk.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#OhMyCH.BinaryToRowIter","page":"For Developers","title":"OhMyCH.BinaryToRowIter","text":"BinaryToRowIter{F<:RowBinaryResult}\n\nIterator for row data in format F (See supported formats).\n\nFields\n\nrow_type::Type: Data type whose fields define row cell types.\nbinary::F: Binary format containing the serialized data.\ncolumn_names::NTuple{N,Symbol}: Column names.\ncolumn_types::NTuple{N,Type}: Column types.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#content_encoding","page":"For Developers","title":"Content encoding","text":"","category":"section"},{"location":"pages/advanced/#OhMyCH.Lz4","page":"For Developers","title":"OhMyCH.Lz4","text":"Lz4 <: Codec\n\nRepresents the LZ4 codec used for compressing and decompressing data.\n\n\n\n\n\n","category":"type"},{"location":"pages/advanced/#OhMyCH.encode","page":"For Developers","title":"OhMyCH.encode","text":"encode(::Type{Lz4}, x::Vector{UInt8}) -> Vector{UInt8}\n\nCompresses the data in the byte vector x using the LZ4 codec and returns a vector of the compressed data.\n\nExamples\n\njulia> original_data = collect(UInt8, \"Hello\") # \"Hello\" in UInt8 array\n5-element Vector{UInt8}:\n 0x48\n 0x65\n 0x6c\n 0x6c\n 0x6f\n\njulia> compressed_data = encode(Lz4, original_data);\n20-element Vector{UInt8}:\n 0x04\n 0x22\n    ⋮\n 0x00\n 0x00\n\n\n\n\n\n","category":"function"},{"location":"pages/advanced/#OhMyCH.decode","page":"For Developers","title":"OhMyCH.decode","text":"decode(::Type{Lz4}, x::Vector{UInt8}) -> Vector{UInt8}\n\nDecompresses LZ4-compressed data in the byte vector x and returns a vector of the original data.\n\nExamples\n\njulia> original_data = collect(UInt8, \"Hello\")\n5-element Vector{UInt8}:\n 0x48\n 0x65\n 0x6c\n 0x6c\n 0x6f\n\njulia> compressed_data = encode(Lz4, original_data);\n\njulia> decode(Lz4, compressed_data) # \"Hello\" in UInt8 array\n5-element Vector{UInt8}:\n 0x48\n 0x65\n 0x6c\n 0x6c\n 0x6f\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"pages/api_reference/#OhMyCH.HttpConfig","page":"API Reference","title":"OhMyCH.HttpConfig","text":"HttpConfig\n\nDefines the configuration for the HTTP connection to the database.\n\nFields\n\nurl::String: Database server URL.\ndatabase::String: Name of the database.\nuser::String: Username for authentication.\npassword::String: Password for authentication.\nverify_ssl::Bool: Verify SSL certificates for HTTPS.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.HttpClient","page":"API Reference","title":"OhMyCH.HttpClient","text":"HttpClient\n\nDefines an HTTP client to connect to the database.\n\nFields\n\nconfig::HttpConfig: Connection configuration, including URL, database name, and credentials.\ncurl_client::CurlClient: Handles HTTP communication with the database server.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.ohmych_connect","page":"API Reference","title":"OhMyCH.ohmych_connect","text":"ohmych_connect(url::String, database::String, user::String, password::String) -> HttpClient\nohmych_connect(config::HttpConfig) -> HttpClient\nohmych_connect(f::Function, args...) -> HttpClient\n\nCreates an HttpClient instance to connect to a database. Once the connection is no longer needed, it must be closed using the close method. The method that takes a function f as the first argument will close the connection automatically.\n\nKeyword arguments\n\nverify_ssl::Bool: Whether to verify the SSL certificate (default: true).\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Base.isopen","page":"API Reference","title":"Base.isopen","text":"isopen(client::HttpClient) -> Bool\n\nChecks that the client is connected to the database.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Base.close","page":"API Reference","title":"Base.close","text":"close(client::HttpClient)\n\nCloses the client connection to the database.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Database-requests","page":"API Reference","title":"Database requests","text":"","category":"section"},{"location":"pages/api_reference/#OhMyCH.execute","page":"API Reference","title":"OhMyCH.execute","text":"execute(client::HttpClient, query::String [, parameters::NamedTuple]; options...) -> Nothing\n\nSends a query to the database using the HttpClient client. Values that need to be substituted into the query can be specified as parameters (see more in Queries with parameters).\n\ninfo: Info\nThis type of request does not imply the return of any result (Fire and Forget).\n\nKeyword arguments\n\nuse_compression::Bool: Flag for enabling data compression (default: true). See more in Content encoding section.\nmax_execution_time::Int: Maximum allowed execution time in seconds (default: 60 seconds).\noptions...: Additional options passed to the query execution function.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> employees_query = \"\"\"\n       CREATE TABLE IF NOT EXISTS employees\n       (\n            name     String\n           ,age      Int32\n           ,position String\n           ,salary   Float64\n       )\n       ENGINE = MergeTree()\n       ORDER BY name\n       \"\"\";\n\njulia> execute(client, employees_query)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OhMyCH.insert","page":"API Reference","title":"OhMyCH.insert","text":"insert(client::HttpClient, query::String, values::Vector; options...) -> Nothing\n\nSends a query to insert values into the database using the HttpClient client\n\ninfo: Info\nThis type of request does not imply the return of any result (Fire and Forget).\n\nKeyword arguments\n\nchunk_size::Int: Specifies the approximate size (in bytes) of one chunk of data being sent (default: 256 * 1024 bytes).\nuse_compression::Bool: Flag for enabling data compression (default: true). See more in Content encoding section.\nmax_execution_time::Int: Maximum allowed execution time in seconds (default: 60 seconds).\noptions...: Additional options passed to the query execution function.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> insert(client, \"INSERT INTO employees (name, age, position, salary)\", [\n    (name = \"Alice\", age = Int32(29), position = \"Developer\", salary = 75000.5),\n    (name = \"Bob\", age = Int32(35), position = \"Manager\", salary = 92000.75),\n    (name = \"Clara\", age = Int32(28), position = \"Designer\", salary = 68000.0),\n    (name = \"David\", age = Int32(40), position = \"Developer\", salary = 81000.3),\n])\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OhMyCH.query","page":"API Reference","title":"OhMyCH.query","text":"query(client::HttpClient, query::String [, parameters::NamedTuple]; options...) -> RowBinaryWithNamesAndTypes\n\nSends a query to the database using the HttpClient client. Values that need to be substituted into the query can be specified as parameters (see more in Queries with parameters).\n\ninfo: Info\nThis type of query involves returning the result from the database. The returned data is represented as a RowBinaryWithNamesAndTypes object.\n\nKeyword arguments\n\nuse_compression::Bool: Flag for enabling data compression (default: true). See more in Content encoding section.\nmax_execution_time::Int: Maximum allowed execution time in seconds (default: 60 seconds).\noptions...: Additional options passed to the query execution function.\n\nSee also eachrow, collect.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> query(client, \"SELECT * FROM employees\")\nRowBinaryWithNamesAndTypes(161-bytes):\n name::String\n age::Int32\n position::String\n salary::Float64\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OhMyCH.insert_binary","page":"API Reference","title":"OhMyCH.insert_binary","text":"insert_binary(client::HttpClient, query::String, values::RowBinary; options...) -> RowBinary\n\nWorks similarly to the insert method, except that the sending data must be a RowBinary object.\n\ntip: Tip\nThis method is effective when sending small portions of data frequently. Intended use in conjunction with query_binary for fast data transfer between databases.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> binary_data = query_binary(client, \"SELECT * FROM employees\")\nRowBinary(107-bytes)\n\njulia> insert_binary(client, \"INSERT INTO another_employees\", binary_data)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OhMyCH.query_binary","page":"API Reference","title":"OhMyCH.query_binary","text":"query_binary(client::HttpClient, query::String [, parameters::NamedTuple]; options...) -> RowBinary\n\nWorks similarly to the query method, except that the retrieved data is represented as a RowBinary object.\n\ntip: Tip\nThis method is effective when requesting small portions of data frequently, since the response does not include information about names and data types. However, in this case, the user will be required to describe the column types and names themselves using his own type T.\n\nSee also eachrow, collect.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> query_binary(client, \"SELECT * FROM employees\")\nRowBinary(107-bytes)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Row-iteration","page":"API Reference","title":"Row iteration","text":"","category":"section"},{"location":"pages/api_reference/#Base.eachrow","page":"API Reference","title":"Base.eachrow","text":"eachrow(binary::RowBinaryWithNamesAndTypes) -> BinaryToRowIter\n\nCreates a new iterator BinaryToRowIter that determines column types and their names from binary object. The elements of such an iterator are NamedTuple objects.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> employees = query(client, \"SELECT * FROM employees\");\n\njulia> for user in eachrow(employees)\n           println(user)\n       end\n(name = \"Alice\", age = 29, position = \"Developer\", salary = 75000.5)\n(name = \"Bob\", age = 35, position = \"Manager\", salary = 92000.75)\n(name = \"Clara\", age = 28, position = \"Designer\", salary = 68000.0)\n(name = \"David\", age = 40, position = \"Developer\", salary = 81000.3)\n\n\n\n\n\neachrow(::Type{T}, binary::RowBinaryResult) -> BinaryToRowIter\n\nCreates a new iterator BinaryToRowIter that uses fields of type T to determine column types. The elements of such an iterator are objects of type T.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> employees = query_binary(client, \"SELECT * FROM employees\");\n\njulia> struct Employee\n           name::String\n           age::Int32\n           position::String\n           salary::Float64\n       end\n\njulia> for employee in eachrow(Employee, employees)\n           println(employee)\n       end\nEmployee(\"Alice\", 29, \"Developer\", 75000.5)\nEmployee(\"Bob\", 35, \"Manager\", 92000.75)\nEmployee(\"Clara\", 28, \"Designer\", 68000.0)\nEmployee(\"David\", 40, \"Developer\", 81000.3)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Base.collect","page":"API Reference","title":"Base.collect","text":"collect(binary::RowBinaryWithNamesAndTypes) -> Vector{NamedTuple}\ncollect(::Type{T}, binary::RowBinaryResult) -> Vector{T}\n\nWorks similarly to the eachrow method, but instead of creating an iterator, it returns all values from the binary representation of the data.\n\nwarning: Warning\nIf you don't need all the values at once, it's preferable to iterate over the rows using the eachrow method.\n\nExamples\n\njulia> client = ohmych_connect(\"http://127.0.0.1:8123\", \"database\", \"username\", \"password\");\n\njulia> employees = query(client, \"SELECT * FROM employees\");\n\njulia> collect(employees)\n4-element Vector{NamedTuple{(:name, :age, :position, :salary), Tuple{String,Int32,String,Float64}}}:\n (name = \"Alice\", age = 29, position = \"Developer\", salary = 75000.5)\n (name = \"Bob\", age = 35, position = \"Manager\", salary = 92000.75)\n (name = \"Clara\", age = 28, position = \"Designer\", salary = 68000.0)\n (name = \"David\", age = 40, position = \"Developer\", salary = 81000.3)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#column_types","page":"API Reference","title":"Column types","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"Most of the ClickHouse column types are the same as the Julia base types.","category":"page"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"ClickHouse Type Julia Type\nBool Bool\nInt8-128, UInt8-128 Int8-128, UInt8-128\nFloat32, Float64 Float32, Float64\nDecimal(P,S) Decimal{P,S}\nString String\nFixedString(N) FixedString{N}\nDate Date\nDateTime DateTime\nDateTime64 NanoDate\nEnum8, Enum16 UInt8, UInt16\nUUID UUID\nIPv4, IPv6 IPv4, IPv6\nArray(T) AbstractVector{T}\nTuple(T1, T2, ...) Tuple\nMap(K, V) AbstractDict{K,V}\nLowCardinality(T) T\nNullable(T) Union{Nothing,T}","category":"page"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"However, some types had to be implemented independently.","category":"page"},{"location":"pages/api_reference/#Decimal","page":"API Reference","title":"Decimal","text":"","category":"section"},{"location":"pages/api_reference/#OhMyCH.Decimal","page":"API Reference","title":"OhMyCH.Decimal","text":"Decimal{P,S} <: AbstractFloat\n\nA type that represents a fixed-precision decimal number with precision P and scale S. Precision P is a total number of digits in the number (including digits before and after the decimal point). Scale S is a number of digits after the decimal point.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.Decimal-Tuple{Union{AbstractString, Real}}","page":"API Reference","title":"OhMyCH.Decimal","text":"Decimal{P,S}(value::Union{Real,AbstractString})\n\nConstructs a Decimal with precision P and scale S from a value.\n\nExamples\n\njulia> Decimal{5,2}(123.45)\nDecimal{5,2}(123.45)\n\njulia> Decimal{5,2}(\"123.45\")\nDecimal{5,2}(123.45)\n\njulia> Decimal{5,2}(123456.0)\nERROR: ArgumentError: Decimal value 123456.0 exceeds limits for Decimal{P=5,S=2}. Max allowed: ±999.99.\n\n\n\n\n\n","category":"method"},{"location":"pages/api_reference/#OhMyCH.Decimal-Tuple{Integer, Integer, Integer}","page":"API Reference","title":"OhMyCH.Decimal","text":"Decimal{P,S}([sign::Integer, ] significand::Integer, exponent::Integer)\n\nConstructs a Decimal with precision P and scale S from its components:\n\nsign: The sign of the decimal (+1 or -1).\nsignificand: The integer part of the number (absolute value).\nexponent: The base-10 exponent.\n\nExamples\n\njulia> Decimal{5,2}(12345, -2)\nDecimal{5,2}(123.45)\n\njulia> Decimal{5,2}(-1, 12345, -3)\nDecimal{5,2}(-12.345)\n\njulia> Decimal{5,2}(123456, -2)\nERROR: ArgumentError: Decimal value 1234.56 exceeds limits for Decimal{P=5,S=2}. Max allowed: ±999.99.\n\n\n\n\n\n","category":"method"},{"location":"pages/api_reference/#FixedString","page":"API Reference","title":"FixedString","text":"","category":"section"},{"location":"pages/api_reference/#OhMyCH.FixedString","page":"API Reference","title":"OhMyCH.FixedString","text":"FixedString{N} <: AbstractString\n\nA string type with a fixed maximum size N.\n\nFields\n\ndata::String: The string data that is constrained by the fixed size N.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.FixedString-Tuple{AbstractString}","page":"API Reference","title":"OhMyCH.FixedString","text":"FixedString{N}(x::String)\n\nConstructs a FixedString object with a fixed maximum size N from the given string x.\n\nExamples\n\njulia> FixedString{10}(\"Hello\")\nFixedString{10}(\"Hello\")\n\njulia> FixedString{3}(\"Hello\")\nERROR: ArgumentError: Input string is longer than 3 bytes (5)\n\n\n\n\n\n","category":"method"},{"location":"pages/api_reference/#Exceptions","page":"API Reference","title":"Exceptions","text":"","category":"section"},{"location":"pages/api_reference/#OhMyCH.OhMyCHException","page":"API Reference","title":"OhMyCH.OhMyCHException","text":"OhMyCHException <: Exception\n\nAn abstract base exception for database-related errors.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.CHServerException","page":"API Reference","title":"OhMyCH.CHServerException","text":"CHServerException <: OhMyCHException\n\nRaised when the ClickHouse server returns an error response while processing a query.\n\nFields\n\ncode::ErrorCodes: An error code indicating the type of database error.\nmessage::String: A descriptive message providing details about the error.\n\nSee also ErrorCodes.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OhMyCH.CHClientException","page":"API Reference","title":"OhMyCH.CHClientException","text":"CHClientException <: OhMyCHException\n\nRepresents an error that occurs during HTTP communication with the ClickHouse database.\n\nFields\n\nmessage::String: A descriptive message providing details about the error.\n\n\n\n\n\n","category":"type"}]
}
